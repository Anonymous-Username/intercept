#pragma once
#include "shared.hpp"
#include "client\client.hpp"
#include "client\client_types.hpp"
#include<vector>

using namespace intercept::client::types;

namespace intercept {
    namespace sqf {
        float acc_time();
        object agent(team_member value_);
        std::vector<std::string> activated_addons();
        std::vector<team_member> agents();
        //std::vector<?> airdensity_curvertd(); // no entry on the biki

        float armorypoints();
        float benchmark();
        side blufor();
        std::string briefingname();
        bool cadetmode();
        object cameraon();
        std::string cameraview();
        config campaignconfigfile();
        bool cheatsenabled();
        side civilian();
        void clearforcesrtd();
        void clearitempool();
        void clearmagazinepool();
        void clearradio();
        void clearweaponpool();
        float clientowner();
        std::string commandingmenu();
        config configfile();
        config confignull();
        control controlnull();
        std::string copyfromclipboard();

        float currentchannel();
        rv_namespace currentnamespace();
        object cursortarget();
        std::vector<float> date();
        float daytime();

        std::vector<script> diag_activemissionfsms();
        std::vector<script> diag_activesqfscripts();
        std::vector<script> diag_activesqsscripts();
        float diag_fps();
        float diag_fpsmin();
        float diag_frameno();
        float diag_ticktime();
        bool dialog();
        float difficulty();
        bool difficultyenabledrtd();
        void disabledebriefingstats();
        void disableserialization();
        display displaynull();
        float distributionregion();
        side east();
        void enableenddialog();
        void endloadingscreen();
        float estimatedendservertime();
        void exit();
        void finishmissioninit();
        bool fog();
        float fogforecast();
        std::vector<float> fogparams();
        void forceend();
        void forceweatherchange();
        bool freelook();
        // TODO array[] getartillerycomputersettings(); // ["Semi (medium)","HE Mortar Shells",0]
        std::string getclientstate();
        // TODO not on biki getdlcassetsusage();
        float getelevationoffset();
        // TODO not on biki std::vector<std::string> getmissiondlcs();
        std::array<float, 2> getmouseposition();
        std::array<float, 2> getobjectviewdistance();
        bool getremotesensorsdisabled();
        std::array<float,6> getresolution();
        float getshadowdistance();
        float gettotaldlcusagetime();
        float gusts();
        void halt();
        bool hasinterface();
        bool hcshownbar();
        // TODO hud_movement_levels hudmovementlevels();
        float humidity();
        side independent();
        void initambientlife();
        bool isautotest();
        bool isfilepatchingenabled();
        bool isinstructorfigureenabled();
        bool ispipenabled();
        bool issteammission();
        bool isstreamfriendlyuienabled();
        bool isstressdamageenabled();
        bool istuthintsenabled();
        std::string language();
        std::vector<std::array<std::string,2>> librarycredits();
        std::vector<std::string> librarydisclaimers();
        float lightnings();
        std::string linebreak();
        void loadgame();
        location locationnull();
        void logentities();
        void mapanimclear();
        void mapanimcommit();
        bool mapanimdone();
        bool markasfinishedonsteam();
        config missionconfigfile();
        float missiondifficulty();
        std::string missionname();
        rv_namespace missionnamespace();
        std::array<float, 6> missionstart();
        float moonintensity();
        float musicvolume();
        float nextweatherchange();
        object objnull();
        side opfor();
        float overcast();
        float overcastforecast();
        rv_namespace parsingnamespace();
        float particlesquality();
        float pi();
        float pixelh();
        float pixelw();
        std::vector<object> playableunits();
        object player();
        float playerrespawntime();
        side playerside();
        // TODO implement product_version productversion();
        std::string profilename();
        rv_namespace profilenamespace();
        std::string profilenamesteam();
        float radiovolume();
        float rain();
        float rainbow();
        void resetcamshake();
        side resistance();
        bool reversedmousey();
        void runinitscript();

		bool visible_watch();
		bool visible_map();
		bool visible_gps();
		bool visible_compass();
		float view_distance();
		bool team_switch_enabled();
		void team_switch();

		float system_of_units();
		float sun_or_moon(); // BUT WHICH ONE IS IT!?!?!??!!?
		float sound_volume();
		bool sling_load_assistant_shown();
		void simul_weather_sync();
		void select_no_player();
		bool saving_enabled();
		void save_profile_namespace();

		std::vector<object> switchable_units();

        float save_zone_x();
        float save_zone_y();
        float save_zone_h();
        float save_zone_w();
        float save_zone_x_abs();
        float save_zone_w_abs();

        bool shown_artillerycomputer();
        bool shown_chat();
        bool shown_compass();
        bool shown_gps();
        bool shown_hud();
        bool shown_map();
        bool shown_pad();
        bool shown_radio();
        bool shown_uavfeed();
        bool shown_warrant();
        bool shown_watch();

        std::string action_name(std::string value_);
        void activate_key(std::string value_);
        void add_switchable_unit(object value_);
        float air_density_rtd(float value_);
        void airport_side(float value_);
        bool alive(object value_);
        std::string animation_state(object value_);
        object assigned_commander(object value_);
        object assigned_driver(object value_);
        object assigned_gunner(object value_);
        object assigned_target(object value_);
        std::string assigned_team(object value_);
        object assigned_vehicle(object value_);

        std::string backpack(object value_);
        object backpack_container(object value_);
        std::string behaviour(object value_);
        std::string binocular(object value_);
        void break_out(std::string value_);
        void break_to(std::string value_);
        void buldozer(bool value_);
        bool buldozer(std::string value_);
        std::string button_action(control value_);
        std::string button_action(float value_);
        bool cam_committed(object value_);
        void cam_destroy(object value_);
        bool cam_preloaded(object value_);
        object cam_target(object value_);
        void cam_use_nvg(bool value_);
        void camera_effect_enable_hud(bool value_);
        float camera_interest(object value_);
        bool can_fire(object value_);
        bool can_move(object value_);
        bool can_stand(object value_);
        bool can_unload_in_combat(object value_);
        bool captive(object value_);
        float captive_num(object value_);
        bool cb_checked(control value_);
        bool channel_enabled(float value_);
        bool check_aifeature(std::string value_);
        void clear_all_items_from_backpack(object value_);
        void clear_backpack_cargo(object value_);
        void clear_backpack_cargo_global(object value_);
        void clear_item_cargo(object value_);
        void clear_item_cargo_global(object value_);
        void clear_magazine_cargo(object value_);
        void clear_magazine_cargo_global(object value_);
        void clear_overlay(control value_);
        void clear_weapon_cargo(object value_);
        void clear_weapon_cargo_global(object value_);
        void close_dialog(float value_);
        void close_overlay(control value_);
        void collapse_object_tree(control value_);
        float collective_rtd(object value_);
        object commander(object value_);
        void comment(std::string value_);
        void commit_overlay(control value_);
        bool completed_fsm(float value_);
        void copy_to_clipboard(std::string value_);
        float count(std::string value_);
        side create_center(side value_);
        bool create_dialog(std::string value_);
        void create_vehicle_crew(object value_);
        std::string current_command(object value_);
        std::string current_magazine(object value_);
        std::string current_muzzle(object value_);
        float current_vision_mode(object value_);
        std::string current_weapon(object value_);
        std::string current_weapon_mode(object value_);
        float current_zeroing(object value_);
        float damage(object value_);
        void de_activate_key(std::string value_);
        float debriefing_text(std::string value_);
        void delete_center(side value_);
        void delete_collection(object value_);
        bool delete_identity(std::string value_);

        void delete_site(object value_);
        bool delete_status(std::string value_);
        void detach(object value_);
        bool did_jipowner(object value_);
        bool difficulty_enabled(std::string value_);
        float direction(object value_);
        void disable_remote_sensors(bool value_);
        void disable_user_input(bool value_);
        void dissolve_team(std::string value_);
        object driver(object value_);
        void echo(std::string value_);
        void edit(std::string value_);
        object effective_commander(object value_);
        void enable_cam_shake(bool value_);
        void enable_caustics(bool value_);
        void enable_diag_legend(bool value_);
        void enable_engine_artillery(bool value_);
        void enable_environment(bool value_);
        void enable_radio(bool value_);
        void enable_sat_normal_on_detail(bool value_);
        void enable_sentences(bool value_);
        void enable_stress_damage(bool value_);
        void enable_team_switch(bool value_);
        void enable_traffic(bool value_);
        void end_mission(std::string value_);
        void estimated_time_left(float value_);
        float exec_fsm(std::string value_);
        void export_jipmessages(std::string value_);
        std::string face(object value_);
        std::string faction(object value_);
        void fail_mission(std::string value_);
        void fill_weapons_from_pool(object value_);
        display find_display(float value_);
        bool finite(float value_);
        object first_backpack(object value_);
        object flag(object value_);
        object flag_owner(object value_);
        side flag_side(object value_);
        std::string flag_texture(object value_);
        bool fleeing(object value_);
        void force_map(bool value_);
        void force_respawn(object value_);
        object form_leader(object value_);
        float formation_direction(object value_);
        object formation_leader(object value_);
        std::string formation_task(object value_);
        float fuel(object value_);
        float gear_idcammo_count(float value_);
        float gear_slot_ammo_count(control value_);
        std::string gear_slot_data(control value_);
        float get_aiming_coef(object value_);
        float get_ammo_cargo(object value_);
        float get_anim_aim_precision(object value_);
        float get_anim_speed_coef(object value_);
        float get_bleeding_remaining(object value_);
        float get_burning_value(object value_);
        object get_connected_uav(object value_);
        float get_custom_aim_coef(object value_);
        float get_dlcusage_time(float value_);
        float get_dammage(object value_);
        float get_dir(object value_);
        float get_dir_visual(object value_);
        object get_editor_camera(control value_);
        std::string get_editor_mode(control value_);
        float get_fatigue(object value_);
        float get_fuel_cargo(object value_);

        float get_mass(object value_);
        float get_object_dlc(object value_);
        float get_object_type(object value_);
        float get_oxygen_remaining(object value_);
        float get_player_channel(object value_);
        std::string get_player_uid(object value_);
        float get_repair_cargo(object value_);
        float get_rotor_brake_rtd(object value_);
        object get_sling_load(object value_);
        float get_stamina(object value_);
        float get_stat_value(std::string value_);
        float get_suppression(object value_);
        float get_weapon_sway(object value_);
        float get_wings_orientation_rtd(object value_);
        float get_wings_position_rtd(object value_);
        std::string goggles(object value_);

        object gunner(object value_);
        std::string handgun_magazine(object value_);
        std::string handgun_weapon(object value_);
        float hands_hit(object value_);
        object hc_leader(group value_);
        void hc_remove_all_groups(object value_);
        void hc_show_bar(bool value_);
        std::string headgear(object value_);
        void hide_body(object value_);
        void hide_object(object value_);
        void hide_object_global(object value_);
        void hint_c(std::string value_);
        std::string hmd(object value_);
        std::string image(std::string value_);
        void import_all_groups(control value_);
        std::string incapacitated_state(object value_);
        bool inflamed(object value_);
        float input_action(std::string value_);
        bool is_able_to_breathe(object value_);
        bool is_aim_precision_enabled(object value_);
        bool is_auto_hover_on(object value_);
        bool is_auto_trim_on_rtd(object value_);
        bool is_autonomous(object value_);
        bool is_bleeding(object value_);
        bool is_burning(object value_);
        bool is_collision_light_on(object value_);
        bool is_copilot_enabled(object value_);
        bool is_dlcavailable(float value_);
        bool is_engine_on(object value_);
        bool is_forced_walk(object value_);
        bool is_formation_leader(object value_);
        bool is_hidden(object value_);
        bool is_in_remains_collector(object value_);
        bool is_key_active(std::string value_);
        bool is_light_on(object value_);
        bool is_localized(std::string value_);
        bool is_manual_fire(object value_);
        bool is_marked_for_collection(object value_);

        bool is_object_hidden(object value_);
        bool is_object_rtd(object value_);
        bool is_player(object value_);
        bool is_real_time(control value_);
        bool is_showing(control value_);
        bool is_sprint_allowed(object value_);
        bool is_stamina_enabled(object value_);
        bool is_touching_ground(object value_);
        bool is_turned_out(object value_);
        bool is_uavconnected(object value_);
        bool is_walking(object value_);
        bool is_weapon_deployed(object value_);
        bool is_weapon_rested(object value_);
        std::string key_image(float value_);
        std::string key_name(float value_);
        std::string land_result(object value_);
        object laser_target(object value_);
        void lb_clear(control value_);
        void lb_clear(float value_);
        float lb_cur_sel(control value_);
        float lb_cur_sel(float value_);
        float lb_size(control value_);
        float lb_size(float value_);
        float lb_sort(control value_);
        float lb_sort_by_value(control value_);
        object leader(object value_);
        bool leaderboard_de_init(std::string value_);
        bool leaderboard_init(std::string value_);
        bool leaderboard_request_rows_friends(std::string value_);
        float leaderboard_state(std::string value_);
        std::string life_state(object value_);
        void light_detach_object(object value_);
        std::string light_is_on(object value_);
        void lnb_clear(control value_);
        void lnb_clear(float value_);
        float lnb_cur_sel_row(control value_);
        float lnb_cur_sel_row(float value_);
        float load(object value_);
        float load_abs(object value_);
        float load_backpack(object value_);
        std::string load_file(std::string value_);
        float load_uniform(object value_);
        float load_vest(object value_);
        std::string localize(std::string value_);
        bool lock_identity(object value_);
        float locked(object value_);
        bool locked_driver(object value_);
        bool mine_active(object value_);
        float morale(object value_);
        void move_out(object value_);
        float move_time(object value_);
        bool move_to_completed(object value_);
        bool move_to_failed(object value_);
        std::string name(object value_);
        std::string name_sound(object value_);
        object nearest_building(object value_);
        float need_reload(object value_);
        std::string net_id(object value_);
        std::string net_id(group value_);
        float next_menu_item_index(control value_);
        float number_of_engines_rtd(object value_);
        object object_from_net_id(std::string value_);
        object object_parent(object value_);
        void on_briefing_group(std::string value_);
        void on_briefing_notes(std::string value_);
        void on_briefing_plan(std::string value_);
        void on_briefing_team_switch(std::string value_);
        bool open_dlc_page(float value_);
        bool open_map(bool value_);
        bool open_youtube_video(std::string value_);
        float owner(object value_);
        float parse_number(std::string value_);
        float parse_number(bool value_);
        std::string parse_text(std::string value_);
        void pick_weapon_pool(object value_);
        std::string pitch(object value_);
        void play_music(std::string value_);
        void play_sound(std::string value_);
        float playable_slots_number(side value_);
        float players_number(side value_);
        bool pp_effect_committed(std::string value_);
        bool pp_effect_committed(float value_);
        void pp_effect_destroy(float value_);
        bool pp_effect_enabled(float value_);
        float precision(object value_);
        bool preload_sound(std::string value_);
        std::string preprocess_file(std::string value_);
        std::string preprocess_file_line_numbers(std::string value_);
        std::string primary_weapon(object value_);
        void process_diary_link(std::string value_);
        void progress_loading_screen(float value_);
        float progress_position(control value_);
        void public_variable(std::string value_);
        void public_variable_server(std::string value_);
        void put_weapon_pool(object value_);
        float query_items_pool(std::string value_);
        float query_magazine_pool(std::string value_);
        float query_weapon_pool(std::string value_);

        std::string rank(object value_);
        float rank_id(object value_);
        float rating(object value_);
        void reload(object value_);
        bool reload_enabled(object value_);
        void remove_all_actions(object value_);
        void remove_all_assigned_items(object value_);
        void remove_all_containers(object value_);
        void remove_all_handgun_items(object value_);
        void remove_all_items(object value_);
        void remove_all_items_with_magazines(object value_);
        void remove_all_mission_event_handlers(std::string value_);
        void remove_all_music_event_handlers(std::string value_);
        void remove_all_primary_weapon_items(object value_);
        void remove_all_weapons(object value_);
        void remove_backpack(object value_);
        void remove_backpack_global(object value_);
        void remove_goggles(object value_);
        void remove_headgear(object value_);
        void remove_switchable_unit(object value_);
        void remove_uniform(object value_);
        void remove_vest(object value_);
        bool required_version(std::string value_);
        void reset_subgroup_direction(object value_);
        void restart_editor_camera(control value_);
        std::string role_description(object value_);
        bool rope_attach_enabled(object value_);
        object rope_attached_to(object value_);
        void rope_destroy(object value_);
        float rope_length(object value_);
        bool rope_unwound(object value_);
        void save_overlay(control value_);
        void save_var(std::string value_);
        void scope_name(std::string value_);
        float score(object value_);
        float score_side(side value_);
        void script_name(std::string value_);
        float scud_state(object value_);
        std::string secondary_weapon(object value_);
        void select_player(object value_);
        void selected_editor_objects(control value_);
        bool server_command(std::string value_);
        bool server_command_available(std::string value_);
        bool server_command_executable(std::string value_);
        void set_acc_time(float value_);
        void set_aperture(float value_);
        void set_armory_points(float value_);
        bool set_current_channel(float value_);

        void set_horizon_parallax_coef(float value_);
        void set_object_view_distance(float value_);
        void set_playable(object value_);
        void set_player_respawn_time(float value_);
        void set_shadow_distance(float value_);
        void set_simul_weather_layers(float value_);
        void set_stamina_scheme(std::string value_);
        void set_system_of_units(float value_);
        void set_terrain_grid(float value_);
        void set_time_multiplier(float value_);
        void set_traffic_distance(float value_);
        void set_view_distance(float value_);
        void show_chat(bool value_);
        void show_cinema_border(bool value_);
        void show_commanding_menu(std::string value_);
        void show_compass(bool value_);
        void show_gps(bool value_);
        void show_hud(bool value_);
        void show_map(bool value_);
        void show_pad(bool value_);
        void show_radio(bool value_);
        bool show_subtitles(bool value_);
        void show_uavfeed(bool value_);
        void show_warrant(bool value_);
        void show_watch(bool value_);
        bool simulation_enabled(object value_);
        float size_of(std::string value_);
        float skill(object value_);
        void skip_time(float value_);
        void sleep(float value_);
        float slider_position(control value_);
        float slider_position(float value_);
        bool some_ammo(object value_);
        std::string speaker(object value_);
        float speed(object value_);
        std::string stance(object value_);
        void stop_engine_rtd(object value_);
        bool stopped(object value_);
        void system_chat(std::string value_);
        std::string text(std::string value_);
        void title_fade_out(float value_);
        std::string to_lower(std::string value_);
        std::string to_upper(std::string value_);
        bool trigger_activated(object value_);
        object trigger_attached_vehicle(object value_);
        std::string trigger_text(object value_);
        float trigger_timeout_current(object value_);
        std::string trigger_type(object value_);
        void tv_clear(float value_);
        void tv_clear(control value_);
        std::string type_of(object value_);
        void uisleep(float value_);
        void unassign_team(object value_);
        void unassign_vehicle(object value_);
        bool underwater(object value_);
        std::string uniform(object value_);
        object uniform_container(object value_);
        object unit_backpack(object value_);
        std::string unit_pos(object value_);
        float unit_recoil_coefficient(object value_);
        bool unlock_achievement(std::string value_);
        void update_object_tree(control value_);
        object vehicle(object value_);
        std::string vehicle_var_name(object value_);
        bool verify_signature(std::string value_);
        std::string vest(object value_);
        object vest_container(object value_);
        float waypoint_timeout_current(group value_);
        bool waypoints_enabled_uav(object value_);
        bool weapon_lowered(object value_);

        void add_backpack(object value0_, const std::string& value1_);
        void add_backpack_global(object value0_, const std::string& value1_);
        void add_goggles(object value0_, const std::string& value1_);
        void add_handgun_item(object value0_, const std::string& value1_);
        void add_headgear(object value0_, const std::string& value1_);
        void add_item(object value0_, const std::string& value1_);
        void add_item_to_backpack(object value0_, const std::string& value1_);
        void add_item_to_uniform(object value0_, const std::string& value1_);
        void add_item_to_vest(object value0_, const std::string& value1_);
        void add_live_stats(float value0_, object value1_);
        void add_magazine(object value0_, const std::string& value1_);
        void add_magazine_global(object value0_, const std::string& value1_);
        void add_primary_weapon_item(object value0_, const std::string& value1_);
        void add_rating(float value0_, object value1_);
        void add_score(float value0_, object value1_);
        void add_score_side(float value0_, side value1_);
        void add_secondary_weapon_item(object value0_, const std::string& value1_);
        void add_uniform(object value0_, const std::string& value1_);
        void add_vehicle(object value0_, group value1_);
        void add_vest(object value0_, const std::string& value1_);
        void add_weapon(object value0_, const std::string& value1_);
        void add_weapon_global(object value0_, const std::string& value1_);
        void allow3dmode(bool value0_, control value1_);
        void allow_crew_in_immobile(bool value0_, object value1_);
        void allow_damage(bool value0_, object value1_);
        void allow_dammage(bool value0_, object value1_);
        void allow_file_operations(bool value0_, control value1_);
        void allow_sprint(bool value0_, object value1_);
        float ammo(object value0_, const std::string& value1_);
        float animation_phase(object value0_, const std::string& value1_);
        void assign_item(object value0_, const std::string& value1_);
        void assign_team(object value0_, const std::string& value1_);
        void assign_to_airport(float value0_, object value1_);
        void button_set_action(const std::string& value0_, control value1_);
        void cam_command(object value0_, const std::string& value1_);
        void cam_commit(float value0_, object value1_);
        void cam_commit_prepared(float value0_, object value1_);
        void cam_preload(float value0_, object value1_);
        void cam_prepare_bank(float value0_, object value1_);
        void cam_prepare_dir(float value0_, object value1_);
        void cam_prepare_dive(float value0_, object value1_);
        void cam_prepare_fov(float value0_, object value1_);
        void cam_set_bank(float value0_, object value1_);
        void cam_set_dive(float value0_, object value1_);
        void cam_set_fov(float value0_, object value1_);
        void cb_set_checked(bool value0_, control value1_);
        void close_display(float value0_, display value1_);
        control controls_group_ctrl(float value0_, control value1_);
        display create_display(const std::string& value0_, display value1_);
        void create_menu(float value0_, control value1_);
        display create_mission_display(const std::string& value0_, display value1_);


        void debug_fsm(float value0_, bool value1_);
        bool diary_subject_exists(object value0_, const std::string& value1_);
        void direct_say(object value0_, const std::string& value1_);
        void disable_ai(object value0_, const std::string& value1_);
        void disable_conversation(bool value0_, object value1_);
        void disable_nvgequipment(bool value0_, object value1_);
        void disable_tiequipment(bool value0_, object value1_);
        control display_ctrl(float value0_, display value1_);
        void display_remove_all_event_handlers(const std::string& value0_, display value1_);
        float door_phase(object value0_, const std::string& value1_);
        float empty_positions(object value0_, const std::string& value1_);
        void enable_ai(object value0_, const std::string& value1_);
        void enable_aifeature(bool value0_, const std::string& value1_);
        void enable_aim_precision(bool value0_, object value1_);
        void enable_auto_start_up_rtd(bool value0_, object value1_);
        bool enable_auto_trim_rtd(bool value0_, object value1_);
        void enable_channel(float value0_, bool value1_);
        void enable_copilot(bool value0_, object value1_);
        void enable_fatigue(bool value0_, object value1_);
        void enable_mimics(bool value0_, object value1_);
        void enable_reload(bool value0_, object value1_);
        void enable_rope_attach(bool value0_, object value1_);
        void enable_simulation(bool value0_, object value1_);
        void enable_simulation_global(bool value0_, object value1_);
        void enable_stamina(bool value0_, object value1_);
        void enable_uavwaypoints(bool value0_, object value1_);
        void engine_on(bool value0_, object value1_);
        void fire(object value0_, const std::string& value1_);
        void fly_in_height(float value0_, object value1_);
        void force_add_uniform(object value0_, const std::string& value1_);
        void force_speed(float value0_, object value1_);
        void force_walk(bool value0_, object value1_);
        std::string get_editor_object_scope(const std::string& value0_, control value1_);
        float get_hit(object value0_, const std::string& value1_);
        float get_hit_index(float value0_, object value1_);
        float get_hit_point_damage(object value0_, const std::string& value1_);
        object get_object_proxy(const std::string& value0_, control value1_);
        float get_speed(object value0_, const std::string& value1_);
        void global_radio(object value0_, const std::string& value1_);
        bool has_weapon(object value0_, const std::string& value1_);
        void hc_remove_group(object value0_, group value1_);
        void hide_object(bool value0_, object value1_);
        void hide_object_global(bool value0_, object value1_);
        void hint_c(const std::string& value0_, const std::string& value1_);
        void html_load(const std::string& value0_, control value1_);
        void inflame(bool value0_, object value1_);
        bool is_flashlight_on(object value0_, const std::string& value1_);
        bool is_irlaser_on(object value0_, const std::string& value1_);
        bool is_kind_of(object value0_, const std::string& value1_);
        bool is_uniform_allowed(object value0_, const std::string& value1_);
        bool kb_add_database(object value0_, const std::string& value1_);
        bool kb_add_database_targets(object value0_, const std::string& value1_);
        bool kb_has_topic(object value0_, const std::string& value1_);
        void kb_remove_topic(object value0_, const std::string& value1_);
        float knows_about(object value0_, side value1_);
        void land(object value0_, const std::string& value1_);
        void land_at(float value0_, object value1_);
        float lb_add(const std::string& value0_, control value1_);
        std::string lb_data(float value0_, control value1_);
        void lb_delete(float value0_, control value1_);
        bool lb_is_selected(float value0_, control value1_);
        std::string lb_picture(float value0_, control value1_);
        std::string lb_picture_right(float value0_, control value1_);
        void lb_set_cur_sel(float value0_, control value1_);
        std::string lb_text(float value0_, control value1_);
        std::string lb_text_right(float value0_, control value1_);
        float lb_value(float value0_, control value1_);
        void leave_vehicle(object value0_, group value1_);
        void limit_speed(float value0_, object value1_);
        void link_item(object value0_, const std::string& value1_);
        float lnb_add_column(float value0_, control value1_);
        void lnb_delete_column(float value0_, control value1_);
        void lnb_delete_row(float value0_, control value1_);
        void lnb_set_cur_sel_row(float value0_, control value1_);
        bool load_identity(object value0_, const std::string& value1_);
        bool load_status(object value0_, const std::string& value1_);
        void lock(bool value0_, object value1_);
        void lock(float value0_, object value1_);
        void lock_cargo(bool value0_, object value1_);
        void lock_driver(bool value0_, object value1_);
        bool locked_cargo(float value0_, object value1_);
        void map_center_on_camera(bool value0_, control value1_);
        bool mine_detected_by(object value0_, side value1_);
        void move_object_to_end(const std::string& value0_, control value1_);
        void play_action(object value0_, const std::string& value1_);
        void play_action_now(object value0_, const std::string& value1_);
        void play_gesture(object value0_, const std::string& value1_);
        void play_move(object value0_, const std::string& value1_);
        void play_move_now(object value0_, const std::string& value1_);
        void pp_effect_commit(float value0_, const std::string& value1_);
        void pp_effect_enable(bool value0_, const std::string& value1_);
        void pp_effect_enable(float value0_, bool value1_);
        void pp_effect_force_in_nvg(float value0_, bool value1_);
        void progress_set_position(float value0_, control value1_);
        void public_variable_client(float value0_, const std::string& value1_);
        void radio_channel_set_call_sign(float value0_, const std::string& value1_);
        void radio_channel_set_label(float value0_, const std::string& value1_);
        bool register_task(const std::string& value0_, team_member value1_);
        void remove_action(float value0_, object value1_);
        void remove_all_event_handlers(object value0_, const std::string& value1_);
        void remove_all_mpevent_handlers(object value0_, const std::string& value1_);
        void remove_handgun_item(object value0_, const std::string& value1_);
        void remove_item(object value0_, const std::string& value1_);
        void remove_item_from_backpack(object value0_, const std::string& value1_);
        void remove_item_from_uniform(object value0_, const std::string& value1_);
        void remove_item_from_vest(object value0_, const std::string& value1_);
        void remove_items(object value0_, const std::string& value1_);
        void remove_magazine_global(object value0_, const std::string& value1_);
        void remove_magazines(object value0_, const std::string& value1_);
        void remove_menu_item(float value0_, control value1_);
        void remove_menu_item(const std::string& value0_, control value1_);
        void remove_primary_weapon_item(object value0_, const std::string& value1_);
        void remove_secondary_weapon_item(object value0_, const std::string& value1_);
        void remove_weapon(object value0_, const std::string& value1_);
        void remove_weapon_global(object value0_, const std::string& value1_);
        void reveal_mine(object value0_, side value1_);
        bool save_identity(object value0_, const std::string& value1_);
        bool save_status(object value0_, const std::string& value1_);
        void select_diary_subject(object value0_, const std::string& value1_);
        void select_weapon(object value0_, const std::string& value1_);
        void send_simple_command(object value0_, const std::string& value1_);
        void set_actual_collective_rtd(float value0_, object value1_);
        void set_airport_side(float value0_, side value1_);
        void set_ammo_cargo(float value0_, object value1_);
        void set_anim_speed_coef(float value0_, object value1_);
        void set_autonomous(bool value0_, object value1_);
        void set_bleeding_remaining(float value0_, object value1_);
        void set_cam_use_ti(float value0_, bool value1_);
        void set_camera_interest(float value0_, object value1_);
        void set_collision_light(bool value0_, object value1_);
        void set_combat_mode(const std::string& value0_, team_member value1_);
        void set_custom_aim_coef(float value0_, object value1_);
        void set_custom_weight_rtd(float value0_, object value1_);
        void set_damage(float value0_, object value1_);
        void set_dammage(float value0_, object value1_);
        void set_dir(float value0_, object value1_);
        void set_drop_interval(float value0_, object value1_);
        void set_editor_mode(const std::string& value0_, control value1_);
        void set_face(object value0_, const std::string& value1_);
        void set_faceanimation(float value0_, object value1_);
        void set_fatigue(float value0_, object value1_);
        void set_flag_side(object value0_, side value1_);
        void set_flag_texture(object value0_, const std::string& value1_);
        void set_formation(const std::string& value0_, team_member value1_);
        void set_formation_task(object value0_, const std::string& value1_);
        void set_from_editor(bool value0_, team_member value1_);
        void set_fuel(float value0_, object value1_);
        void set_fuel_cargo(float value0_, object value1_);

        void set_identity(object value0_, const std::string& value1_);
        void set_light_brightness(float value0_, object value1_);
        void set_light_day_light(bool value0_, object value1_);
        void set_light_flare_max_distance(float value0_, object value1_);
        void set_light_flare_size(float value0_, object value1_);
        void set_light_intensity(float value0_, object value1_);
        void set_light_use_flare(bool value0_, object value1_);

        void set_mimic(object value0_, const std::string& value1_);
        void set_name(object value0_, const std::string& value1_);
        void set_name_sound(object value0_, const std::string& value1_);
        bool set_owner(float value0_, object value1_);
        void set_oxygen_remaining(float value0_, object value1_);
        void set_particle_class(object value0_, const std::string& value1_);
        void set_pilot_light(bool value0_, object value1_);
        void set_pitch(float value0_, object value1_);
        void set_radio_msg(float value0_, const std::string& value1_);
        void set_random_lip(bool value0_, object value1_);
        void set_rank(object value0_, const std::string& value1_);
        void set_repair_cargo(float value0_, object value1_);
        void set_rotor_brake_rtd(float value0_, object value1_);
        void set_skill(float value0_, object value1_);
        void set_speaker(object value0_, const std::string& value1_);
        void set_stamina(float value0_, object value1_);
        void set_suppression(float value0_, object value1_);
        void set_target_age(object value0_, const std::string& value1_);
        void set_trigger_text(object value0_, const std::string& value1_);
        void set_trigger_type(object value0_, const std::string& value1_);
        void set_unconscious(bool value0_, object value1_);
        void set_unit_ability(float value0_, object value1_);
        void set_unit_pos(object value0_, const std::string& value1_);
        void set_unit_pos_weak(object value0_, const std::string& value1_);
        void set_unit_rank(object value0_, const std::string& value1_);
        void set_unit_recoil_coefficient(float value0_, object value1_);
        void set_vehicle_ammo(float value0_, object value1_);
        void set_vehicle_ammo_def(float value0_, object value1_);
        void set_vehicle_armor(float value0_, object value1_);
        void set_vehicle_id(float value0_, object value1_);
        void set_vehicle_lock(object value0_, const std::string& value1_);
        void set_vehicle_var_name(object value0_, const std::string& value1_);
        void show3dicons(bool value0_, control value1_);
        void show_legend(bool value0_, control value1_);
        float skill(object value0_, const std::string& value1_);
        float skill_final(object value0_, const std::string& value1_);
        void slider_set_position(float value0_, control value1_);
        void stop(bool value0_, object value1_);
        void suppress_for(float value0_, object value1_);
        void switch_action(object value0_, const std::string& value1_);
        void switch_camera(object value0_, const std::string& value1_);
        void switch_gesture(object value0_, const std::string& value1_);
        void switch_light(object value0_, const std::string& value1_);
        void switch_move(object value0_, const std::string& value1_);
        void trigger_attach_object(float value0_, object value1_);
        std::string tv_tooltip(float value0_, control value1_);
        void unassign_item(object value0_, const std::string& value1_);
        void unlink_item(object value0_, const std::string& value1_);
        bool unregister_task(const std::string& value0_, team_member value1_);
        void use_audio_time_for_moves(bool value0_, object value1_);
        void vehicle_radio(object value0_, const std::string& value1_);

        side create_center(side value_);
        void delete_center(side value_);
        void delete_team(team_member value_);
        void do3denaction(const std::string& value_);
        display find_display(float value_);
        side flag_side(object value_);
        std::string formation(team_member value_);
        bool from_editor(team_member value_);
        void get3dengrid(const std::string& value_);
        object get_editor_camera(control value_);
        object hc_leader(group value_);
        std::string image(const std::string& value_);
        bool is_agent(team_member value_);
        std::string key_image(float value_);
        std::string key_name(float value_);
        team_member leader(team_member value_);
        bool local(group value_);
        std::string net_id(group value_);
        object object_from_net_id(const std::string& value_);
        bool open_map(bool value_);
        float parse_number(bool value_);
        std::string parse_text(const std::string& value_);
        float playable_slots_number(side value_);
        float players_number(side value_);
        float score_side(side value_);
        bool show_subtitles(bool value_);
        std::string team_name(team_member value_);
        std::string team_type(team_member value_);
        float waypoint_timeout_current(group value_);
    }
}
