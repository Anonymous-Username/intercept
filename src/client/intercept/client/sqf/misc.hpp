#pragma once
#include "shared.hpp"
#include "client\client.hpp"
#include "shared\client_types.hpp"
#include<vector>

using namespace intercept::types;

namespace intercept {
	namespace sqf {
		struct game_resolution
		{
			vector2 resolution;
			vector2 viewport;
			float aspect_ratio;
			float ui_scale;
		};

		namespace misc {
			float acc_time();
			object agent(const team_member &value_);
			std::vector<std::string> activated_addons();
			std::vector<team_member> agents();
			//std::vector<?> airdensity_curvertd(); // no entry on the biki

			float armorypoints();
			float benchmark();
			side blufor();
			std::string briefingname();
			bool cadetmode();
			object cameraon();
			std::string cameraview();
			config campaignconfigfile();
			bool cheatsenabled();
			side civilian();
			void clearforcesrtd();
			void clearitempool();
			void clearmagazinepool();
			void clearradio();
			void clearweaponpool();
			float clientowner();
			std::string commandingmenu();
			config configfile();
			config confignull();
			control controlnull();
			std::string copyfromclipboard();

			float currentchannel();
			rv_namespace currentnamespace();
			object cursortarget();
			std::vector<float> date();
			float daytime();

			std::vector<script> diag_activemissionfsms();
			std::vector<script> diag_activesqfscripts();
			std::vector<script> diag_activesqsscripts();
			float diag_fps();
			float diag_fpsmin();
			float diag_frameno();
			float diag_ticktime();
			bool dialog();
			float difficulty();
			bool difficulty_enabled_rtd();
			void disable_debriefing_stats();
			void disable_serialization();
			display display_null();
			float distribution_region();
			side east();
			void enable_end_dialog();
			void end_loading_screen();
			float estimated_end_server_time();
			void exit();
			void finish_mission_init();
			bool fog();
			float fog_forecast();
			std::vector<float> fog_params();
			void force_end();
			void force_weather_change();
			bool free_look();
			// TODO array[] getartillerycomputersettings(); // ["Semi (medium)","HE Mortar Shells",0]
			std::string getclientstate();
			// TODO not on biki getdlcassetsusage();
			float getelevationoffset();
			// TODO not on biki std::vector<std::string> getmissiondlcs();
			vector2 get_mouse_position();
			std::array<float, 2> get_object_view_distance();
			bool get_remote_sensors_disabled();
			game_resolution get_resolution();
			float get_shadow_distance();
			float get_total_dlc_usage_time();
			float gusts();
			void halt();
			bool has_interface();
			bool hc_shown_bar();
			// TODO hud_movement_levels hudmovementlevels();
			float humidity();
			side independent();
			void init_ambient_life();
			bool is_autotest();
			bool is_filepatching_enabled();
			bool is_instructor_figure_enabled();
			bool is_pip_enabled();
			bool is_steam_mission();
			bool is_stream_friendly_ui_enabled();
			bool is_stress_damage_enabled();
			bool is_tut_hints_enabled();
			std::string language();
			std::vector<std::array<std::string, 2>> library_credits(); //USE A PAIR FOR FUCK SAKE!
			std::vector<std::string> library_disclaimers();
			float lightnings();
			std::string line_break();
			void load_game();
			location location_null();
			void log_entities();
			void map_anim_clear();
			void map_anim_commit();
			bool map_anim_done();
			bool mark_as_finished_on_steam();
			config mission_config_file();
			float mission_difficulty();
			std::string mission_name();
			rv_namespace mission_namespace();
			std::array<float, 6> mission_start();
			float moon_intensity();
			float music_volume();
			float next_weather_change();
			object obj_null();
			side opfor();
			float overcast();
			float overcast_forecast();
			rv_namespace parsing_namespace();
			float particles_quality();
			float pi();
			float pixel_h();
			float pixel_w();
			std::vector<object> playable_units();
			object player();
			float player_respawn_time();
			side player_side();
			// TODO implement product_version productversion();
			std::string profile_name();
			rv_namespace profile_namespace();
			std::string profile_namesteam();
			float radio_volume();
			float rain();
			float rainbow();
			void reset_cam_shake();
			side resistance();
			bool reversed_mouse_y();
			void run_init_script();

			bool visible_watch();
			bool visible_map();
			bool visible_gps();
			bool visible_compass();
			float view_distance();
			bool team_switch_enabled();
			void team_switch();

			float system_of_units();
			float sun_or_moon(); // BUT WHICH ONE IS IT!?!?!??!!?
			float sound_volume();
			bool sling_load_assistant_shown();
			void simul_weather_sync();
			void select_no_player();
			bool saving_enabled();
			void save_profile_namespace();

			std::vector<object> switchable_units();

			float safe_zone_x();
			float safe_zone_y();
			float safe_zone_h();
			float safe_zone_w();
			float safe_zone_x_abs();
			float safe_zone_w_abs();

			bool shown_artillerycomputer();
			bool shown_chat();
			bool shown_compass();
			bool shown_gps();
			bool shown_hud();
			bool shown_map();
			bool shown_pad();
			bool shown_radio();
			bool shown_uavfeed();
			bool shown_warrant();
			bool shown_watch();

			std::string action_name(const std::string &value_);
			void activate_key(const std::string &value_);
			void add_switchable_unit(const object &value_);
			float air_density_rtd(float value_);
			void airport_side(float value_);
			bool alive(const object &value_);
			std::string animation_state(const object &value_);
			object assigned_commander(const object &value_);
			object assigned_driver(const object &value_);
			object assigned_gunner(const object &value_);
			object assigned_target(const object &value_);
			std::string assigned_team(const object &value_);
			object assigned_vehicle(const object &value_);

			std::string backpack(const object &value_);
			object backpack_container(const object &value_);
			std::string behaviour(const object &value_);
			std::string binocular(const object &value_);
			void break_out(const std::string &value_);
			void break_to(const std::string &value_);
			void buldozer(bool value_);
			bool buldozer(const std::string &value_);
			std::string button_action(const control &value_);
			std::string button_action(float value_);
			bool cam_committed(const object &value_);
			void cam_destroy(const object &value_);
			bool cam_preloaded(const object &value_);
			object cam_target(const object &value_);
			void cam_use_nvg(bool value_);
			void camera_effect_enable_hud(bool value_);
			float camera_interest(const object &value_);
			bool can_fire(const object &value_);
			bool can_move(const object &value_);
			bool can_stand(const object &value_);
			bool can_unload_in_combat(const object &value_);
			bool captive(const object &value_);
			float captive_num(const object &value_);
			bool cb_checked(const control &value_);
			bool channel_enabled(float value_);
			bool check_aifeature(const std::string &value_);
			void clear_all_items_from_backpack(const object &value_);
			void clear_backpack_cargo(const object &value_);
			void clear_backpack_cargo_global(const object &value_);
			void clear_item_cargo(const object &value_);
			void clear_item_cargo_global(const object &value_);
			void clear_magazine_cargo(const object &value_);
			void clear_magazine_cargo_global(const object &value_);
			void clear_overlay(const control &value_);
			void clear_weapon_cargo(const object &value_);
			void clear_weapon_cargo_global(const object &value_);
			void close_dialog(float value_);
			void close_overlay(const control &value_);
			void collapse_object_tree(const control &value_);
			float collective_rtd(const object &value_);
			object commander(const object &value_);
			void comment(const std::string &value_);
			void commit_overlay(const control &value_);
			bool completed_fsm(float value_);
			void copy_to_clipboard(const std::string &value_);
			float count(const std::string &value_);
			side create_center(const side &value_);
			bool create_dialog(const std::string &value_);
			void create_vehicle_crew(const object &value_);
			std::string current_command(const object &value_);
			std::string current_magazine(const object &value_);
			std::string current_muzzle(const object &value_);
			float current_vision_mode(const object &value_);
			std::string current_weapon(const object &value_);
			std::string current_weapon_mode(const object &value_);
			float current_zeroing(const object &value_);
			float damage(const object &value_);
			void de_activate_key(const std::string &value_);
			float debriefing_text(const std::string &value_);
			void delete_center(const side &value_);
			void delete_collection(const object &value_);
			bool delete_identity(const std::string &value_);

			void delete_site(const object &value_);
			bool delete_status(const std::string &value_);
			void detach(const object &value_);
			bool did_jipowner(const object &value_);
			bool difficulty_enabled(const std::string &value_);
			float direction(const object &value_);
			void disable_remote_sensors(bool value_);
			void disable_user_input(bool value_);
			void dissolve_team(const std::string &value_);
			object driver(const object &value_);
			void echo(const std::string &value_);
			void edit(const std::string &value_);
			object effective_commander(const object &value_);
			void enable_cam_shake(bool value_);
			void enable_caustics(bool value_);
			void enable_diag_legend(bool value_);
			void enable_engine_artillery(bool value_);
			void enable_environment(bool value_);
			void enable_radio(bool value_);
			void enable_sat_normal_on_detail(bool value_);
			void enable_sentences(bool value_);
			void enable_stress_damage(bool value_);
			void enable_team_switch(bool value_);
			void enable_traffic(bool value_);
			void end_mission(const std::string &value_);
			void estimated_time_left(float value_);
			float exec_fsm(const std::string &value_);
			void export_jipmessages(const std::string &value_);
			std::string face(const object &value_);
			std::string faction(const object &value_);
			void fail_mission(const std::string &value_);
			void fill_weapons_from_pool(const object &value_);
			display find_display(float value_);
			bool finite(float value_);
			object first_backpack(const object &value_);
			object flag(const object &value_);
			object flag_owner(const object &value_);
			side flag_side(const object &value_);
			std::string flag_texture(const object &value_);
			bool fleeing(const object &value_);
			void force_map(bool value_);
			void force_respawn(const object &value_);
			object form_leader(const object &value_);
			float formation_direction(const object &value_);
			object formation_leader(const object &value_);
			std::string formation_task(const object &value_);
			float fuel(const object &value_);
			float gear_idcammo_count(float value_);
			float gear_slot_ammo_count(const control &value_);
			std::string gear_slot_data(const control &value_);
			float get_aiming_coef(const object &value_);
			float get_ammo_cargo(const object &value_);
			float get_anim_aim_precision(const object &value_);
			float get_anim_speed_coef(const object &value_);
			float get_bleeding_remaining(const object &value_);
			float get_burning_value(const object &value_);
			object get_connected_uav(const object &value_);
			float get_custom_aim_coef(const object &value_);
			float get_dlcusage_time(float value_);
			float get_dammage(const object &value_);
			float get_dir(const object &value_);
			float get_dir_visual(const object &value_);
			object get_editor_camera(const control &value_);
			std::string get_editor_mode(const control &value_);
			float get_fatigue(const object &value_);
			float get_fuel_cargo(const object &value_);

			float get_mass(const object &value_);
			float get_object_dlc(const object &value_);
			float get_object_type(const object &value_);
			float get_oxygen_remaining(const object &value_);
			float get_player_channel(const object &value_);
			std::string get_player_uid(const object &value_);
			float get_repair_cargo(const object &value_);
			float get_rotor_brake_rtd(const object &value_);
			object get_sling_load(const object &value_);
			float get_stamina(const object &value_);
			float get_stat_value(const std::string &value_);
			float get_suppression(const object &value_);
			float get_weapon_sway(const object &value_);
			float get_wings_orientation_rtd(const object &value_);
			float get_wings_position_rtd(const object &value_);
			std::string goggles(const object &value_);

			object gunner(const object &value_);
			std::string handgun_magazine(const object &value_);
			std::string handgun_weapon(const object &value_);
			float hands_hit(const object &value_);
			object hc_leader(const group &value_);
			void hc_remove_all_groups(const object &value_);
			void hc_show_bar(bool value_);
			std::string headgear(const object &value_);
			void hide_body(const object &value_);
			void hide_object(const object &value_);
			void hide_object_global(const object &value_);
			void hint_c(const std::string &value_);
			std::string hmd(const object &value_);
			std::string image(const std::string &value_);
			void import_all_groups(const control &value_);
			std::string incapacitated_state(const object &value_);
			bool inflamed(const object &value_);
			float input_action(const std::string &value_);
			bool is_able_to_breathe(const object &value_);
			bool is_aim_precision_enabled(const object &value_);
			bool is_auto_hover_on(const object &value_);
			bool is_auto_trim_on_rtd(const object &value_);
			bool is_autonomous(const object &value_);
			bool is_bleeding(const object &value_);
			bool is_burning(const object &value_);
			bool is_collision_light_on(const object &value_);
			bool is_copilot_enabled(const object &value_);
			bool is_dlcavailable(float value_);
			bool is_engine_on(const object &value_);
			bool is_forced_walk(const object &value_);
			bool is_formation_leader(const object &value_);
			bool is_hidden(const object &value_);
			bool is_in_remains_collector(const object &value_);
			bool is_key_active(const std::string &value_);
			bool is_light_on(const object &value_);
			bool is_localized(const std::string &value_);
			bool is_manual_fire(const object &value_);
			bool is_marked_for_collection(const object &value_);

			bool is_object_hidden(const object &value_);
			bool is_object_rtd(const object &value_);
			bool is_player(const object &value_);
			bool is_real_time(const control &value_);
			bool is_showing(const control &value_);
			bool is_sprint_allowed(const object &value_);
			bool is_stamina_enabled(const object &value_);
			bool is_touching_ground(const object &value_);
			bool is_turned_out(const object &value_);
			bool is_uavconnected(const object &value_);
			bool is_walking(const object &value_);
			bool is_weapon_deployed(const object &value_);
			bool is_weapon_rested(const object &value_);
			std::string key_image(float value_);
			std::string key_name(float value_);
			std::string land_result(const object &value_);
			object laser_target(const object &value_);
			void lb_clear(const control &value_);
			void lb_clear(float value_);
			float lb_cur_sel(const control &value_);
			float lb_cur_sel(float value_);
			float lb_size(const control &value_);
			float lb_size(float value_);
			float lb_sort(const control &value_);
			float lb_sort_by_value(const control &value_);
			object leader(const object &value_);
			bool leaderboard_de_init(const std::string &value_);
			bool leaderboard_init(const std::string &value_);
			bool leaderboard_request_rows_friends(const std::string &value_);
			float leaderboard_state(const std::string &value_);
			std::string life_state(const object &value_);
			void light_detach_object(const object &value_);
			std::string light_is_on(const object &value_);
			void lnb_clear(const control &value_);
			void lnb_clear(float value_);
			float lnb_cur_sel_row(const control &value_);
			float lnb_cur_sel_row(float value_);
			float load(const object &value_);
			float load_abs(const object &value_);
			float load_backpack(const object &value_);
			std::string load_file(const std::string &value_);
			float load_uniform(const object &value_);
			float load_vest(const object &value_);
			std::string localize(const std::string &value_);
			bool lock_identity(const object &value_);
			float locked(const object &value_);
			bool locked_driver(const object &value_);
			bool mine_active(const object &value_);
			float morale(const object &value_);
			void move_out(const object &value_);
			float move_time(const object &value_);
			bool move_to_completed(const object &value_);
			bool move_to_failed(const object &value_);
			std::string name(const object &value_);
			std::string name_sound(const object &value_);
			object nearest_building(const object &value_);
			float need_reload(const object &value_);
			std::string net_id(const object &value_);
			std::string net_id(const group &value_);
			float next_menu_item_index(const control &value_);
			float number_of_engines_rtd(const object &value_);
			object object_from_net_id(const std::string &value_);
			object object_parent(const object &value_);
			void on_briefing_group(const std::string &value_);
			void on_briefing_notes(const std::string &value_);
			void on_briefing_plan(const std::string &value_);
			void on_briefing_team_switch(const std::string &value_);
			bool open_dlc_page(float value_);
			bool open_map(bool value_);
			bool open_youtube_video(const std::string &value_);
			float owner(const object &value_);
			float parse_number(const std::string &value_);
			float parse_number(bool value_);
			std::string parse_text(const std::string &value_);
			void pick_weapon_pool(const object &value_);
			std::string pitch(const object &value_);
			void play_music(const std::string &value_);
			void play_sound(const std::string &value_);
			float playable_slots_number(const side &value_);
			float players_number(const side &value_);
			bool pp_effect_committed(const std::string &value_);
			bool pp_effect_committed(float value_);
			void pp_effect_destroy(float value_);
			bool pp_effect_enabled(float value_);
			float precision(const object &value_);
			bool preload_sound(const std::string &value_);
			std::string preprocess_file(const std::string &value_);
			std::string preprocess_file_line_numbers(const std::string &value_);
			std::string primary_weapon(const object &value_);
			void process_diary_link(const std::string &value_);
			void progress_loading_screen(float value_);
			float progress_position(const control &value_);
			void public_variable(const std::string &value_);
			void public_variable_server(const std::string &value_);
			void put_weapon_pool(const object &value_);
			float query_items_pool(const std::string &value_);
			float query_magazine_pool(const std::string &value_);
			float query_weapon_pool(const std::string &value_);

			std::string rank(const object &value_);
			float rank_id(const object &value_);
			float rating(const object &value_);
			void reload(const object &value_);
			bool reload_enabled(const object &value_);
			void remove_all_actions(const object &value_);
			void remove_all_assigned_items(const object &value_);
			void remove_all_containers(const object &value_);
			void remove_all_handgun_items(const object &value_);
			void remove_all_items(const object &value_);
			void remove_all_items_with_magazines(const object &value_);
			void remove_all_mission_event_handlers(const std::string &value_);
			void remove_all_music_event_handlers(const std::string &value_);
			void remove_all_primary_weapon_items(const object &value_);
			void remove_all_weapons(const object &value_);
			void remove_backpack(const object &value_);
			void remove_backpack_global(const object &value_);
			void remove_goggles(const object &value_);
			void remove_headgear(const object &value_);
			void remove_switchable_unit(const object &value_);
			void remove_uniform(const object &value_);
			void remove_vest(const object &value_);
			bool required_version(const std::string &value_);
			void reset_subgroup_direction(const object &value_);
			void restart_editor_camera(const control &value_);
			std::string role_description(const object &value_);
			bool rope_attach_enabled(const object &value_);
			object rope_attached_to(const object &value_);
			void rope_destroy(const object &value_);
			float rope_length(const object &value_);
			bool rope_unwound(const object &value_);
			void save_overlay(const control &value_);
			void save_var(const std::string &value_);
			void scope_name(const std::string &value_);
			float score(const object &value_);
			float score_side(const side &value_);
			void script_name(const std::string &value_);
			float scud_state(const object &value_);
			std::string secondary_weapon(const object &value_);
			void select_player(const object &value_);
			void selected_editor_objects(const control &value_);
			bool server_command(const std::string &value_);
			bool server_command_available(const std::string &value_);
			bool server_command_executable(const std::string &value_);
			void set_acc_time(float value_);
			void set_aperture(float value_);
			void set_armory_points(float value_);
			bool set_current_channel(float value_);

			void set_horizon_parallax_coef(float value_);
			void set_object_view_distance(float value_);
			void set_playable(const object &value_);
			void set_player_respawn_time(float value_);
			void set_shadow_distance(float value_);
			void set_simul_weather_layers(float value_);
			void set_stamina_scheme(const std::string &value_);
			void set_system_of_units(float value_);
			void set_terrain_grid(float value_);
			void set_time_multiplier(float value_);
			void set_traffic_distance(float value_);
			void set_view_distance(float value_);
			void show_chat(bool value_);
			void show_cinema_border(bool value_);
			void show_commanding_menu(const std::string &value_);
			void show_compass(bool value_);
			void show_gps(bool value_);
			void show_hud(bool value_);
			void show_map(bool value_);
			void show_pad(bool value_);
			void show_radio(bool value_);
			bool show_subtitles(bool value_);
			void show_uavfeed(bool value_);
			void show_warrant(bool value_);
			void show_watch(bool value_);
			bool simulation_enabled(const object &value_);
			float size_of(const std::string &value_);
			float skill(const object &value_);
			void skip_time(float value_);
			//void sleep(float value_);
			float slider_position(const control &value_);
			float slider_position(float value_);
			bool some_ammo(const object &value_);
			std::string speaker(const object &value_);
			float speed(const object &value_);
			std::string stance(const object &value_);
			void stop_engine_rtd(const object &value_);
			bool stopped(const object &value_);
			void system_chat(const std::string &value_);
			std::string text(const std::string &value_);
			void title_fade_out(float value_);
			std::string to_lower(const std::string &value_);
			std::string to_upper(const std::string &value_);
			bool trigger_activated(const object &value_);
			object trigger_attached_vehicle(const object &value_);
			std::string trigger_text(const object &value_);
			float trigger_timeout_current(const object &value_);
			std::string trigger_type(const object &value_);
			void tv_clear(float value_);
			void tv_clear(const control &value_);
			std::string type_of(const object &value_);
			void uisleep(float value_);
			void unassign_team(const object &value_);
			void unassign_vehicle(const object &value_);
			bool underwater(const object &value_);
			std::string uniform(const object &value_);
			object uniform_container(const object &value_);
			object unit_backpack(const object &value_);
			std::string unit_pos(const object &value_);
			float unit_recoil_coefficient(const object &value_);
			bool unlock_achievement(const std::string &value_);
			void update_object_tree(const control &value_);
			object vehicle(const object &value_);
			std::string vehicle_var_name(const object &value_);
			bool verify_signature(const std::string &value_);
			std::string vest(const object &value_);
			object vest_container(const object &value_);
			float waypoint_timeout_current(const group &value_);
			bool weapon_lowered(const object &value_);

			void add_backpack(const object &value0_, const std::string& value1_);
			void add_backpack_global(const object &value0_, const std::string& value1_);
			void add_goggles(const object &value0_, const std::string& value1_);
			void add_handgun_item(const object &value0_, const std::string& value1_);
			void add_headgear(const object &value0_, const std::string& value1_);
			void add_item(const object &value0_, const std::string& value1_);
			void add_item_to_backpack(const object &value0_, const std::string& value1_);
			void add_item_to_uniform(const object &value0_, const std::string& value1_);
			void add_item_to_vest(const object &value0_, const std::string& value1_);
			void add_live_stats(const object &value0_, float value1_);
			void add_magazine(const object &value0_, const std::string& value1_);
			void add_magazine_global(const object &value0_, const std::string& value1_);
			void add_primary_weapon_item(const object &value0_, const std::string& value1_);
			void add_rating(const object &value0_, float value1_);
			void add_score(const object &value0_, float value1_);
			void add_score_side(const side &value0_, float value1_);
			void add_secondary_weapon_item(const object &value0_, const std::string& value1_);
			void add_uniform(const object &value0_, const std::string& value1_);
			void add_vehicle(const group &value0_, const object &value1_);
			void add_vest(const object &value0_, const std::string& value1_);
			void add_weapon(const object &value0_, const std::string& value1_);
			void add_weapon_global(const object &value0_, const std::string& value1_);
			void allow3dmode(const control &value0_, bool value1_);
			void allow_crew_in_immobile(const object &value0_, bool value1_);
			void allow_damage(const object &value0_, bool value1_);
			void allow_dammage(const object &value0_, bool value1_);
			void allow_file_operations(const control &value0_, bool value1_);
			void allow_sprint(bool value0_, const object &value1_);
			float ammo(const object &value0_, const std::string& value1_);
			float animation_phase(const object &value0_, const std::string& value1_);
			void assign_item(const object &value0_, const std::string& value1_);
			void assign_team(const object &value0_, const std::string& value1_);
			void assign_to_airport(float value0_, const object &value1_);
			void button_set_action(const std::string& value0_, const control &value1_);
			void cam_command(const object &value0_, const std::string& value1_);
			void cam_commit(float value0_, const object &value1_);
			void cam_commit_prepared(float value0_, const object &value1_);
			void cam_preload(float value0_, const object &value1_);
			void cam_prepare_bank(float value0_, const object &value1_);
			void cam_prepare_dir(float value0_, const object &value1_);
			void cam_prepare_dive(float value0_, const object &value1_);
			void cam_prepare_fov(float value0_, const object &value1_);
			void cam_set_bank(float value0_, const object &value1_);
			void cam_set_dive(float value0_, const object &value1_);
			void cam_set_fov(float value0_, const object &value1_);
			void cb_set_checked(bool value0_, const control &value1_);
			void close_display(float value0_, display value1_);
			control controls_group_ctrl(float value0_, const control &value1_);
			display create_display(const std::string& value0_, display value1_);
			void create_menu(float value0_, const control &value1_);
			display create_mission_display(const std::string& value0_, display value1_);


			void debug_fsm(float value0_, bool value1_);
			bool diary_subject_exists(const object &value0_, const std::string& value1_);
			void direct_say(const object &value0_, const std::string& value1_);
			void disable_ai(const object &value0_, const std::string& value1_);
			void disable_conversation(bool value0_, const object &value1_);
			void disable_nvgequipment(bool value0_, const object &value1_);
			void disable_tiequipment(bool value0_, const object &value1_);
			control display_ctrl(float value0_, display value1_);
			void display_remove_all_event_handlers(const std::string& value0_, display value1_);
			float door_phase(const object &value0_, const std::string& value1_);
			float empty_positions(const object &value0_, const std::string& value1_);
			void enable_ai(const object &value0_, const std::string& value1_);
			void enable_aifeature(bool value0_, const std::string& value1_);
			void enable_aim_precision(bool value0_, const object &value1_);
			void enable_auto_start_up_rtd(bool value0_, const object &value1_);
			bool enable_auto_trim_rtd(bool value0_, const object &value1_);
			void enable_channel(float value0_, bool value1_);
			void enable_copilot(bool value0_, const object &value1_);
			void enable_fatigue(bool value0_, const object &value1_);
			void enable_mimics(bool value0_, const object &value1_);
			void enable_reload(bool value0_, const object &value1_);
			void enable_rope_attach(bool value0_, const object &value1_);
			void enable_simulation(bool value0_, const object &value1_);
			void enable_simulation_global(bool value0_, const object &value1_);
			void enable_stamina(bool value0_, const object &value1_);
			void engine_on(bool value0_, const object &value1_);
			void fire(const object &value0_, const std::string& value1_);
			void fly_in_height(float value0_, const object &value1_);
			void force_add_uniform(const object &value0_, const std::string& value1_);
			void force_speed(float value0_, const object &value1_);
			void force_walk(bool value0_, const object &value1_);
			std::string get_editor_object_scope(const std::string& value0_, const control &value1_);
			float get_hit(const object &value0_, const std::string& value1_);
			float get_hit_index(float value0_, const object &value1_);
			float get_hit_point_damage(const object &value0_, const std::string& value1_);
			object get_object_proxy(const std::string& value0_, const control &value1_);
			float get_speed(const object &value0_, const std::string& value1_);
			void global_radio(const object &value0_, const std::string& value1_);
			bool has_weapon(const object &value0_, const std::string& value1_);
			void hc_remove_group(const object &value0_, const group &value1_);
			void hide_object(bool value0_, const object &value1_);
			void hide_object_global(bool value0_, const object &value1_);
			void hint_c(const std::string& value0_, const std::string& value1_);
			void html_load(const std::string& value0_, const control &value1_);
			void inflame(bool value0_, const object &value1_);
			bool is_flashlight_on(const object &value0_, const std::string& value1_);
			bool is_irlaser_on(const object &value0_, const std::string& value1_);
			bool is_kind_of(const object &value0_, const std::string& value1_);
			bool is_uniform_allowed(const object &value0_, const std::string& value1_);
			bool kb_add_database(const object &value0_, const std::string& value1_);
			bool kb_add_database_targets(const object &value0_, const std::string& value1_);
			bool kb_has_topic(const object &value0_, const std::string& value1_);
			void kb_remove_topic(const object &value0_, const std::string& value1_);
			float knows_about(const object &value0_, const side &value1_);
			void land(const object &value0_, const std::string& value1_);
			void land_at(float value0_, const object &value1_);
			float lb_add(const std::string& value0_, const control &value1_);
			std::string lb_data(float value0_, const control &value1_);
			void lb_delete(float value0_, const control &value1_);
			bool lb_is_selected(float value0_, const control &value1_);
			std::string lb_picture(float value0_, const control &value1_);
			std::string lb_picture_right(float value0_, const control &value1_);
			void lb_set_cur_sel(float value0_, const control &value1_);
			std::string lb_text(float value0_, const control &value1_);
			std::string lb_text_right(float value0_, const control &value1_);
			float lb_value(float value0_, const control &value1_);
			void leave_vehicle(const object &value0_, const group &value1_);
			void limit_speed(float value0_, const object &value1_);
			void link_item(const object &value0_, const std::string& value1_);
			float lnb_add_column(float value0_, const control &value1_);
			void lnb_delete_column(float value0_, const control &value1_);
			void lnb_delete_row(float value0_, const control &value1_);
			void lnb_set_cur_sel_row(float value0_, const control &value1_);
			bool load_identity(const object &value0_, const std::string& value1_);
			bool load_status(const object &value0_, const std::string& value1_);
			void lock(bool value0_, const object &value1_);
			void lock(float value0_, const object &value1_);
			void lock_cargo(bool value0_, const object &value1_);
			void lock_driver(bool value0_, const object &value1_);
			bool locked_cargo(float value0_, const object &value1_);
			void map_center_on_camera(bool value0_, const control &value1_);
			bool mine_detected_by(const object &value0_, const side &value1_);
			void move_object_to_end(const std::string& value0_, const control &value1_);
			void play_action(const object &value0_, const std::string& value1_);
			void play_action_now(const object &value0_, const std::string& value1_);
			void play_gesture(const object &value0_, const std::string& value1_);
			void play_move(const object &value0_, const std::string& value1_);
			void play_move_now(const object &value0_, const std::string& value1_);
			void pp_effect_commit(float value0_, const std::string& value1_);
			void pp_effect_enable(bool value0_, const std::string& value1_);
			void pp_effect_enable(float value0_, bool value1_);
			void pp_effect_force_in_nvg(float value0_, bool value1_);
			void progress_set_position(float value0_, const control &value1_);
			void public_variable_client(float value0_, const std::string& value1_);
			void radio_channel_set_call_sign(float value0_, const std::string& value1_);
			void radio_channel_set_label(float value0_, const std::string& value1_);
			bool register_task(const std::string& value0_, const team_member &value1_);
			void remove_action(float value0_, const object &value1_);
			void remove_all_event_handlers(const object &value0_, const std::string& value1_);
			void remove_all_mpevent_handlers(const object &value0_, const std::string& value1_);
			void remove_handgun_item(const object &value0_, const std::string& value1_);
			void remove_item(const object &value0_, const std::string& value1_);
			void remove_item_from_backpack(const object &value0_, const std::string& value1_);
			void remove_item_from_uniform(const object &value0_, const std::string& value1_);
			void remove_item_from_vest(const object &value0_, const std::string& value1_);
			void remove_items(const object &value0_, const std::string& value1_);
			void remove_magazine_global(const object &value0_, const std::string& value1_);
			void remove_magazines(const object &value0_, const std::string& value1_);
			void remove_menu_item(float value0_, const control &value1_);
			void remove_menu_item(const std::string& value0_, const control &value1_);
			void remove_primary_weapon_item(const object &value0_, const std::string& value1_);
			void remove_secondary_weapon_item(const object &value0_, const std::string& value1_);
			void remove_weapon(const object &value0_, const std::string& value1_);
			void remove_weapon_global(const object &value0_, const std::string& value1_);
			void reveal_mine(const object &value0_, const side &value1_);
			bool save_identity(const object &value0_, const std::string& value1_);
			bool save_status(const object &value0_, const std::string& value1_);
			void select_diary_subject(const object &value0_, const std::string& value1_);
			void select_weapon(const object &value0_, const std::string& value1_);
			void send_simple_command(const object &value0_, const std::string& value1_);
			void set_actual_collective_rtd(float value0_, const object &value1_);
			void set_airport_side(float value0_, const side &value1_);
			void set_ammo_cargo(float value0_, const object &value1_);
			void set_anim_speed_coef(float value0_, const object &value1_);
			void set_autonomous(bool value0_, const object &value1_);
			void set_bleeding_remaining(float value0_, const object &value1_);
			void set_cam_use_ti(float value0_, bool value1_);
			void set_camera_interest(float value0_, const object &value1_);
			void set_collision_light(bool value0_, const object &value1_);
			void set_combat_mode(const std::string& value0_, const team_member &value1_);
			void set_custom_aim_coef(float value0_, const object &value1_);
			void set_custom_weight_rtd(float value0_, const object &value1_);
			void set_damage(float value0_, const object &value1_);
			void set_dammage(float value0_, const object &value1_);
			void set_dir(float value0_, const object &value1_);
			void set_drop_interval(float value0_, const object &value1_);
			void set_editor_mode(const std::string& value0_, const control &value1_);
			void set_face(const object &value0_, const std::string& value1_);
			void set_faceanimation(float value0_, const object &value1_);
			void set_fatigue(float value0_, const object &value1_);
			void set_flag_side(const object &value0_, const side &value1_);
			void set_flag_texture(const object &value0_, const std::string& value1_);
			void set_formation(const std::string& value0_, const team_member &value1_);
			void set_formation_task(const object &value0_, const std::string& value1_);
			void set_from_editor(bool value0_, const team_member &value1_);
			void set_fuel(float value0_, const object &value1_);
			void set_fuel_cargo(float value0_, const object &value1_);

			void set_identity(const object &value0_, const std::string& value1_);
			void set_light_brightness(float value0_, const object &value1_);
			void set_light_day_light(bool value0_, const object &value1_);
			void set_light_flare_max_distance(float value0_, const object &value1_);
			void set_light_flare_size(float value0_, const object &value1_);
			void set_light_intensity(float value0_, const object &value1_);
			void set_light_use_flare(bool value0_, const object &value1_);

			void set_mimic(const object &value0_, const std::string& value1_);
			void set_name(const object &value0_, const std::string& value1_);
			void set_name_sound(const object &value0_, const std::string& value1_);
			bool set_owner(float value0_, const object &value1_);
			void set_oxygen_remaining(float value0_, const object &value1_);
			void set_particle_class(const object &value0_, const std::string& value1_);
			void set_pilot_light(bool value0_, const object &value1_);
			void set_pitch(float value0_, const object &value1_);
			void set_radio_msg(float value0_, const std::string& value1_);
			void set_random_lip(bool value0_, const object &value1_);
			void set_rank(const object &value0_, const std::string& value1_);
			void set_repair_cargo(float value0_, const object &value1_);
			void set_rotor_brake_rtd(float value0_, const object &value1_);
			void set_skill(float value0_, const object &value1_);
			void set_speaker(const object &value0_, const std::string& value1_);
			void set_stamina(float value0_, const object &value1_);
			void set_suppression(float value0_, const object &value1_);
			void set_target_age(const object &value0_, const std::string& value1_);
			void set_trigger_text(const object &value0_, const std::string& value1_);
			void set_trigger_type(const object &value0_, const std::string& value1_);
			void set_unconscious(bool value0_, const object &value1_);
			void set_unit_ability(float value0_, const object &value1_);
			void set_unit_pos(const object &value0_, const std::string& value1_);
			void set_unit_pos_weak(const object &value0_, const std::string& value1_);
			void set_unit_rank(const object &value0_, const std::string& value1_);
			void set_unit_recoil_coefficient(float value0_, const object &value1_);
			void set_vehicle_ammo(float value0_, const object &value1_);
			void set_vehicle_ammo_def(float value0_, const object &value1_);
			void set_vehicle_armor(float value0_, const object &value1_);
			void set_vehicle_id(float value0_, const object &value1_);
			void set_vehicle_lock(const object &value0_, const std::string& value1_);
			void set_vehicle_var_name(const object &value0_, const std::string& value1_);
			void show3dicons(bool value0_, const control &value1_);
			void show_legend(bool value0_, const control &value1_);
			float skill(const object &value0_, const std::string& value1_);
			float skill_final(const object &value0_, const std::string& value1_);
			void slider_set_position(float value0_, const control &value1_);
			void stop(bool value0_, const object &value1_);
			void suppress_for(float value0_, const object &value1_);
			void switch_action(const object &value0_, const std::string& value1_);
			void switch_camera(const object &value0_, const std::string& value1_);
			void switch_gesture(const object &value0_, const std::string& value1_);
			void switch_light(const object &value0_, const std::string& value1_);
			void switch_move(const object &value0_, const std::string& value1_);
			void trigger_attach_object(float value0_, const object &value1_);
			std::string tv_tooltip(float value0_, const control &value1_);
			void unassign_item(const object &value0_, const std::string& value1_);
			void unlink_item(const object &value0_, const std::string& value1_);
			bool unregister_task(const std::string& value0_, const team_member &value1_);
			void use_audio_time_for_moves(bool value0_, const object &value1_);
			void vehicle_radio(const object &value0_, const std::string& value1_);

			side create_center(const side &value_);
			void delete_center(const side &value_);
			void delete_team(const team_member &value_);
			void do3denaction(const std::string& value_);
			display find_display(float value_);
			side flag_side(const object &value_);
			std::string formation(const team_member &value_);
			bool from_editor(const team_member &value_);
			void get3dengrid(const std::string& value_);
			object get_editor_camera(const control &value_);
			object hc_leader(const group &value_);
			std::string image(const std::string& value_);
			bool is_agent(const team_member &value_);
			std::string key_image(float value_);
			std::string key_name(float value_);
			team_member leader(const team_member &value_);
			bool local(const group &value_);
			std::string net_id(const group &value_);
			object object_from_net_id(const std::string& value_);
			bool open_map(bool value_);
			float parse_number(bool value_);
			std::string parse_text(const std::string& value_);
			float playable_slots_number(const side &value_);
			float players_number(const side &value_);
			float score_side(const side &value_);
			bool show_subtitles(bool value_);
			std::string team_name(const team_member &value_);
			std::string team_type(const team_member &value_);

			void save_game();
			void save_joysticks();
			side side_enemy();
			side side_friendly();
			side side_logic();
			side side_unknown();
			team_member team_member_null();
			side west();
			bool buldozer_is_enabled_road_diag();
			void buldozer_reload_oper_map();
			void cancel_simple_task_destination(const task &value_);
			task current_task(const object &value_);
			script exec_vm(const std::string& value_);
			float priority(const task &value_);
			bool script_done(const script &value_);
			bool task_completed(const task &value_);
			task task_parent(const task &value_);
			std::string task_state(const task &value_);
			void terminate(const script &value_);
			std::string type(const task &value_);
		}
    }
}
